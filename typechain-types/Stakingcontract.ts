/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type TotalBalanceStruct = {
  personStake: string;
  totalstake: BigNumberish;
};

export type TotalBalanceStructOutput = [string, BigNumber] & {
  personStake: string;
  totalstake: BigNumber;
};

export type StakeStruct = {
  stakeamount: BigNumberish;
  staker: string;
  staketime: BigNumberish;
  laststakeTime: BigNumberish;
  haveStaked: boolean;
};

export type StakeStructOutput = [
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  boolean
] & {
  stakeamount: BigNumber;
  staker: string;
  staketime: BigNumber;
  laststakeTime: BigNumber;
  haveStaked: boolean;
};

export interface StakingcontractInterface extends utils.Interface {
  functions: {
    "StakingToken()": FunctionFragment;
    "boredApeOwnerAccount()": FunctionFragment;
    "createStake(uint256)": FunctionFragment;
    "getStakerTotalBal()": FunctionFragment;
    "getStakers()": FunctionFragment;
    "getYieldUser(address)": FunctionFragment;
    "newStake()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardperday(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "viewTotalBalance()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "StakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "boredApeOwnerAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakerTotalBal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getYieldUser",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "newStake", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardperday",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "viewTotalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "StakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boredApeOwnerAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakerTotalBal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getStakers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getYieldUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardperday",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewTotalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Staked(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type StakedEvent = TypedEvent<
  [string, BigNumber],
  { staker: string; amount: BigNumber }
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface Stakingcontract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingcontractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    StakingToken(overrides?: CallOverrides): Promise<[string]>;

    boredApeOwnerAccount(overrides?: CallOverrides): Promise<[string]>;

    createStake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getStakerTotalBal(
      overrides?: CallOverrides
    ): Promise<[TotalBalanceStructOutput]>;

    getStakers(overrides?: CallOverrides): Promise<[StakeStructOutput]>;

    getYieldUser(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    newStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardperday(
      day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bonus: BigNumber }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    viewTotalBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _balance: BigNumber }>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  StakingToken(overrides?: CallOverrides): Promise<string>;

  boredApeOwnerAccount(overrides?: CallOverrides): Promise<string>;

  createStake(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getStakerTotalBal(
    overrides?: CallOverrides
  ): Promise<TotalBalanceStructOutput>;

  getStakers(overrides?: CallOverrides): Promise<StakeStructOutput>;

  getYieldUser(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  newStake(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardperday(
    day: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  viewTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    StakingToken(overrides?: CallOverrides): Promise<string>;

    boredApeOwnerAccount(overrides?: CallOverrides): Promise<string>;

    createStake(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakerTotalBal(
      overrides?: CallOverrides
    ): Promise<TotalBalanceStructOutput>;

    getStakers(overrides?: CallOverrides): Promise<StakeStructOutput>;

    getYieldUser(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    newStake(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardperday(
      day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    viewTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Staked(address,uint256)"(staker?: null, amount?: null): StakedEventFilter;
    Staked(staker?: null, amount?: null): StakedEventFilter;
  };

  estimateGas: {
    StakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    boredApeOwnerAccount(overrides?: CallOverrides): Promise<BigNumber>;

    createStake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getStakerTotalBal(overrides?: CallOverrides): Promise<BigNumber>;

    getStakers(overrides?: CallOverrides): Promise<BigNumber>;

    getYieldUser(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    newStake(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardperday(
      day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    viewTotalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    StakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boredApeOwnerAccount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createStake(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getStakerTotalBal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getYieldUser(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    newStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardperday(
      day: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    viewTotalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
