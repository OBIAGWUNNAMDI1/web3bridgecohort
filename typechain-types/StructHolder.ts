/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type OwnerStruct = {
  name: string;
  age: BigNumberish;
  ownerAddress: string;
};

export type OwnerStructOutput = [string, BigNumber, string] & {
  name: string;
  age: BigNumber;
  ownerAddress: string;
};

export interface StructHolderInterface extends utils.Interface {
  functions: {
    "SetStruct((string,uint256,address))": FunctionFragment;
    "getStruct(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "SetStruct",
    values: [OwnerStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getStruct",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "SetStruct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStruct", data: BytesLike): Result;

  events: {
    "out(tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "out"): EventFragment;
}

export type outEvent = TypedEvent<
  [OwnerStructOutput],
  { arg0: OwnerStructOutput }
>;

export type outEventFilter = TypedEventFilter<outEvent>;

export interface StructHolder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StructHolderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SetStruct(
      a: OwnerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getStruct(
      indexx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[OwnerStructOutput] & { ST: OwnerStructOutput }>;
  };

  SetStruct(
    a: OwnerStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getStruct(
    indexx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<OwnerStructOutput>;

  callStatic: {
    SetStruct(a: OwnerStruct, overrides?: CallOverrides): Promise<void>;

    getStruct(
      indexx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<OwnerStructOutput>;
  };

  filters: {
    "out(tuple)"(undefined?: null): outEventFilter;
    out(undefined?: null): outEventFilter;
  };

  estimateGas: {
    SetStruct(
      a: OwnerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getStruct(
      indexx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SetStruct(
      a: OwnerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getStruct(
      indexx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
